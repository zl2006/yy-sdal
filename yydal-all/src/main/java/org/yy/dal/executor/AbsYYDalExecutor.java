/*
* 文 件 名:  AbsYYDalExecutor.java
* 版    权:  YY Technologies Co., Ltd. Copyright 2012-2013,  All rights reserved
* 描    述:  Sql执行器
* 修 改 人:  zhouliang
* 修改时间:  2016年4月7日
* 修改内容:  <修改内容>
*/
package org.yy.dal.executor;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.Statement;
import java.util.List;

import org.yy.dal.ds.YYDalParameter;
import org.yy.dal.ds.YYDalPreparedStatement;
import org.yy.dal.ds.YYDalStatement;
import org.yy.dal.ds.constants.PreparedStatementMode;
import org.yy.dal.ds.constants.StatementMode;

/**
* Sql执行器
* 
* @author  zhouliang
* @version  [1.0, 2016年2月23日]
* @since  [yy-sdal/1.0]
*/
public abstract class AbsYYDalExecutor {
    
    /**
     * 设置SQL参数
     */
    protected void setParams(Statement statement, List<YYDalParameter> params)
        throws Exception {
        
        //如果非PreparedStatement时不用设置参数 
        if (!(statement instanceof PreparedStatement)) {
            return;
        }
        
        if (params == null || params.size() == 0) {
            return;
        }
        
        for (int i = 1; i < params.size(); ++i) { //设置参数方法为1个参数时
            YYDalParameter item = params.get(i);
            if (item.getNum() == 1) {
                statement.getClass()
                    .getMethod(item.getProperty(), int.class, item.getParam1().getClass())
                    .invoke(statement, i, item.getParam1());
            }
            else if (item.getNum() == 2) {//设置参数方法为2个参数时
                statement.getClass()
                    .getMethod(item.getProperty(), int.class, item.getParam1().getClass(), item.getParam2().getClass())
                    .invoke(statement, i, item.getParam1(), item.getParam2());
            }
            else if (item.getNum() == 3) {//设置参数方法为3个参数时
                statement.getClass()
                    .getMethod(item.getProperty(),
                        int.class,
                        item.getParam1().getClass(),
                        item.getParam2().getClass(),
                        item.getParam3().getClass())
                    .invoke(statement, i, item.getParam1(), item.getParam2(), item.getParam3());
            }
            else if (item.getNum() == 4) {//设置参数方法为4个参数时
                statement.getClass()
                    .getMethod(item.getProperty(),
                        int.class,
                        item.getParam1().getClass(),
                        item.getParam2().getClass(),
                        item.getParam3().getClass(),
                        item.getParam4().getClass())
                    .invoke(statement, i, item.getParam1(), item.getParam2(), item.getParam3(), item.getParam4());
            }
        }
    }
    
    /**
     * 根据不同模式创建Statement
     */
    protected Statement createStatement(Connection conn, YYDalStatement dalStatement)
        throws SQLException {
        if (dalStatement.getModel() == StatementMode.BASE) {
            return conn.createStatement();
        }
        else if (dalStatement.getModel() == StatementMode.RESLUTSETTYPE_1) {
            return conn.createStatement(dalStatement.getReslutSetType(), dalStatement.getResultSetHoldability());
        }
        else if (dalStatement.getModel() == StatementMode.RESLUTSETTYPE_2) {
            return conn.createStatement(dalStatement.getReslutSetType(),
                dalStatement.getResultSetConcurrency(),
                dalStatement.getResultSetHoldability());
        }
        
        throw new SQLFeatureNotSupportedException();
    }
    
    /**
     * 根据不同模式创建PreparedStatement
     */
    protected PreparedStatement createPreparedStatement(String sql, Connection conn,
        YYDalPreparedStatement dalPreparedStatement)
        throws SQLException {
        if (dalPreparedStatement.getMode() == PreparedStatementMode.BASE) {
            return conn.prepareStatement(sql);
        }
        else if (dalPreparedStatement.getMode() == PreparedStatementMode.RESLUTSETTYPE_1) {
            return conn.prepareStatement(sql,
                dalPreparedStatement.getReslutSetType(),
                dalPreparedStatement.getResultSetConcurrency());
        }
        else if (dalPreparedStatement.getMode() == PreparedStatementMode.RESLUTSETTYPE_2) {
            return conn.prepareStatement(sql,
                dalPreparedStatement.getReslutSetType(),
                dalPreparedStatement.getResultSetConcurrency(),
                dalPreparedStatement.getResultSetHoldability());
        }
        else if (dalPreparedStatement.getMode() == PreparedStatementMode.AUTOGENERATEKEYS) {
            return conn.prepareStatement(sql, dalPreparedStatement.getAutoGeneratedKeys());
        }
        else if (dalPreparedStatement.getMode() == PreparedStatementMode.COLUMNINDEXES) {
            return conn.prepareStatement(sql, dalPreparedStatement.getColumnIndexes());
        }
        else if (dalPreparedStatement.getMode() == PreparedStatementMode.COLUMNNAMES) {
            return conn.prepareStatement(sql, dalPreparedStatement.getColumnNames());
        }
        throw new SQLFeatureNotSupportedException();
    }
}
